#ifndef ZIGIL_KEYCODES_H
#define ZIGIL_KEYCODES_H

#include "zigil.h"
#include <stdint.h>

// Key presses will be generated for all ZK and LK keycodes. However, key
// releases will ONLY be generated for ZK keycodes (physical keys)

typedef enum zgl_KeyCode {
    ZK_NONE,
     
    ZK_POINTER_LEFT,
    ZK_POINTER_MIDDLE,
    ZK_POINTER_RIGHT,
    ZK_POINTER_X1,
    ZK_POINTER_X2,
    ZK_POINTER_WHEELUP,
    ZK_POINTER_WHEELDOWN,
     
    ZK_0,
    ZK_1,
    ZK_2,
    ZK_3,
    ZK_4,
    ZK_5,
    ZK_6,
    ZK_7,
    ZK_8,
    ZK_9,
    ZK_a,
    ZK_b,
    ZK_c,
    ZK_d,
    ZK_e,
    ZK_f,
    ZK_g,
    ZK_h,
    ZK_i,
    ZK_j,
    ZK_k,
    ZK_l,
    ZK_m,
    ZK_n,
    ZK_o,
    ZK_p,
    ZK_q,
    ZK_r,
    ZK_s,
    ZK_t,
    ZK_u,
    ZK_v,
    ZK_w,
    ZK_x,
    ZK_y,
    ZK_z,

    ZK_F1,
    ZK_F2,
    ZK_F3,
    ZK_F4,
    ZK_F5,
    ZK_F6,
    ZK_F7,
    ZK_F8,
    ZK_F9,
    ZK_F10,
    ZK_F11,
    ZK_F12,

    // modifiers
    ZK_LALT,
    ZK_LCTRL,
    ZK_LSHIFT,
    ZK_RALT,
    ZK_RCTRL,
    ZK_RSHIFT,
     
    // unmodifiable
    ZK_BACK,
    ZK_ESC,
    ZK_CAPS,
    ZK_DEL,

    // modifiable
    ZK_RET,
    ZK_SPC, 
    ZK_TAB,
    ZK_GRAVE,       /* ` */
    ZK_MINUS,       /* - */
    ZK_EQUALS,      /* = */
    ZK_LEFTBRACKET, /* [ */
    ZK_RIGHTBRACKET,/* ] */
    ZK_BACKSLASH,   /* \ */ 
    ZK_SEMICOLON,   /* ; */
    ZK_APOSTROPHE,  /* ' */
    ZK_COMMA,       /* , */
    ZK_PERIOD,      /* . */
    ZK_SLASH,       /* / */
    ZK_UP,
    ZK_DOWN,
    ZK_LEFT,
    ZK_RIGHT,

    NUM_ZK
} zgl_KeyCode;

typedef enum zgl_LongKeyCode {
    LK_NONE,
     
    LK_POINTER_LEFT,
    LK_POINTER_MIDDLE,
    LK_POINTER_RIGHT,
    LK_POINTER_X1,
    LK_POINTER_X2,
    LK_POINTER_WHEELUP,
    LK_POINTER_WHEELDOWN,
    
    LK_0,
    LK_1,
    LK_2,
    LK_3,
    LK_4,
    LK_5,
    LK_6,
    LK_7,
    LK_8,
    LK_9,
    LK_a,
    LK_b,
    LK_c,
    LK_d,
    LK_e,
    LK_f,
    LK_g,
    LK_h,
    LK_i,
    LK_j,
    LK_k,
    LK_l,
    LK_m,
    LK_n,
    LK_o,
    LK_p,
    LK_q,
    LK_r,
    LK_s,
    LK_t,
    LK_u,
    LK_v,
    LK_w,
    LK_x,
    LK_y,
    LK_z,

    LK_F1,
    LK_F2,
    LK_F3,
    LK_F4,
    LK_F5,
    LK_F6,
    LK_F7,
    LK_F8,
    LK_F9,
    LK_F10,
    LK_F11,
    LK_F12,

    // modifiers
    LK_LALT,
    LK_LCTRL,
    LK_LSHIFT,
    LK_RALT,
    LK_RCTRL,
    LK_RSHIFT,
     
    // unmodifiable
    LK_BACK,
    LK_ESC,
    LK_CAPS,
    LK_DEL,

    // modifiable
    LK_RET,
    LK_SPC, 
    LK_TAB,
    LK_GRAVE,       /* ` */
    LK_MINUS,       /* - */
    LK_EQUALS,      /* = */
    LK_LEFTBRACKET, /* [ */
    LK_RIGHTBRACKET,/* ] */
    LK_BACKSLASH,   /* \ */ 
    LK_SEMICOLON,   /* ; */
    LK_APOSTROPHE,  /* ' */
    LK_COMMA,       /* , */
    LK_PERIOD,      /* . */
    LK_SLASH,       /* / */
    LK_UP,
    LK_DOWN,
    LK_LEFT,
    LK_RIGHT,

    LK_C_RET,
    LK_C_SPC, 
    LK_C_TAB,
    LK_C_GRAVE,
    LK_C_MINUS,
    LK_C_EQUALS,
    LK_C_LEFTBRACKET,
    LK_C_RIGHTBRACKET,
    LK_C_BACKSLASH,
    LK_C_SEMICOLON,
    LK_C_APOSTROPHE,
    LK_C_COMMA,
    LK_C_PERIOD,
    LK_C_SLASH,
    LK_C_UP,
    LK_C_DOWN,
    LK_C_LEFT,
    LK_C_RIGHT,
    LK_C_0,
    LK_C_1,
    LK_C_2,
    LK_C_3,
    LK_C_4,
    LK_C_5,
    LK_C_6,
    LK_C_7,
    LK_C_8,
    LK_C_9,
    LK_C_a,
    LK_C_b,
    LK_C_c,
    LK_C_d,
    LK_C_e,
    LK_C_f,
    LK_C_g,
    LK_C_h,
    LK_C_i,
    LK_C_j,
    LK_C_k,
    LK_C_l,
    LK_C_m,
    LK_C_n,
    LK_C_o,
    LK_C_p,
    LK_C_q,
    LK_C_r,
    LK_C_s,
    LK_C_t,
    LK_C_u,
    LK_C_v,
    LK_C_w,
    LK_C_x,
    LK_C_y,
    LK_C_z,

    LK_M_RET,
    LK_M_SPC, 
    LK_M_TAB,
    LK_M_GRAVE,
    LK_M_MINUS,
    LK_M_EQUALS,
    LK_M_LEFTBRACKET,
    LK_M_RIGHTBRACKET,
    LK_M_BACKSLASH,
    LK_M_SEMICOLON,
    LK_M_APOSTROPHE,
    LK_M_COMMA,
    LK_M_PERIOD,
    LK_M_SLASH,
    LK_M_UP,
    LK_M_DOWN,
    LK_M_LEFT,
    LK_M_RIGHT,
    LK_M_0,
    LK_M_1,
    LK_M_2,
    LK_M_3,
    LK_M_4,
    LK_M_5,
    LK_M_6,
    LK_M_7,
    LK_M_8,
    LK_M_9,
    LK_M_a,
    LK_M_b,
    LK_M_c,
    LK_M_d,
    LK_M_e,
    LK_M_f,
    LK_M_g,
    LK_M_h,
    LK_M_i,
    LK_M_j,
    LK_M_k,
    LK_M_l,
    LK_M_m,
    LK_M_n,
    LK_M_o,
    LK_M_p,
    LK_M_q,
    LK_M_r,
    LK_M_s,
    LK_M_t,
    LK_M_u,
    LK_M_v,
    LK_M_w,
    LK_M_x,
    LK_M_y,
    LK_M_z,

    LK_S_RET,
    LK_S_SPC, 
    LK_S_TAB,
    LK_S_GRAVE,
    LK_S_MINUS,
    LK_S_EQUALS,
    LK_S_LEFTBRACKET,
    LK_S_RIGHTBRACKET,
    LK_S_BACKSLASH,
    LK_S_SEMICOLON,
    LK_S_APOSTROPHE,
    LK_S_COMMA,
    LK_S_PERIOD,
    LK_S_SLASH,
    LK_S_UP,
    LK_S_DOWN,
    LK_S_LEFT,
    LK_S_RIGHT,
    LK_S_0,
    LK_S_1,
    LK_S_2,
    LK_S_3,
    LK_S_4,
    LK_S_5,
    LK_S_6,
    LK_S_7,
    LK_S_8,
    LK_S_9,
    LK_S_a,
    LK_S_b,
    LK_S_c,
    LK_S_d,
    LK_S_e,
    LK_S_f,
    LK_S_g,
    LK_S_h,
    LK_S_i,
    LK_S_j,
    LK_S_k,
    LK_S_l,
    LK_S_m,
    LK_S_n,
    LK_S_o,
    LK_S_p,
    LK_S_q,
    LK_S_r,
    LK_S_s,
    LK_S_t,
    LK_S_u,
    LK_S_v,
    LK_S_w,
    LK_S_x,
    LK_S_y,
    LK_S_z,

    LK_C_M_RET,
    LK_C_M_SPC, 
    LK_C_M_TAB,
    LK_C_M_GRAVE,
    LK_C_M_MINUS,
    LK_C_M_EQUALS,
    LK_C_M_LEFTBRACKET,
    LK_C_M_RIGHTBRACKET,
    LK_C_M_BACKSLASH,
    LK_C_M_SEMICOLON,
    LK_C_M_APOSTROPHE,
    LK_C_M_COMMA,
    LK_C_M_PERIOD,
    LK_C_M_SLASH,
    LK_C_M_UP,
    LK_C_M_DOWN,
    LK_C_M_LEFT,
    LK_C_M_RIGHT,
    LK_C_M_0,
    LK_C_M_1,
    LK_C_M_2,
    LK_C_M_3,
    LK_C_M_4,
    LK_C_M_5,
    LK_C_M_6,
    LK_C_M_7,
    LK_C_M_8,
    LK_C_M_9,
    LK_C_M_a,
    LK_C_M_b,
    LK_C_M_c,
    LK_C_M_d,
    LK_C_M_e,
    LK_C_M_f,
    LK_C_M_g,
    LK_C_M_h,
    LK_C_M_i,
    LK_C_M_j,
    LK_C_M_k,
    LK_C_M_l,
    LK_C_M_m,
    LK_C_M_n,
    LK_C_M_o,
    LK_C_M_p,
    LK_C_M_q,
    LK_C_M_r,
    LK_C_M_s,
    LK_C_M_t,
    LK_C_M_u,
    LK_C_M_v,
    LK_C_M_w,
    LK_C_M_x,
    LK_C_M_y,
    LK_C_M_z,

    LK_C_S_RET,
    LK_C_S_SPC, 
    LK_C_S_TAB,
    LK_C_S_GRAVE,
    LK_C_S_MINUS,
    LK_C_S_EQUALS,
    LK_C_S_LEFTBRACKET,
    LK_C_S_RIGHTBRACKET,
    LK_C_S_BACKSLASH,
    LK_C_S_SEMICOLON,
    LK_C_S_APOSTROPHE,
    LK_C_S_COMMA,
    LK_C_S_PERIOD,
    LK_C_S_SLASH,
    LK_C_S_UP,
    LK_C_S_DOWN,
    LK_C_S_LEFT,
    LK_C_S_RIGHT,
    LK_C_S_0,
    LK_C_S_1,
    LK_C_S_2,
    LK_C_S_3,
    LK_C_S_4,
    LK_C_S_5,
    LK_C_S_6,
    LK_C_S_7,
    LK_C_S_8,
    LK_C_S_9,
    LK_C_S_a,
    LK_C_S_b,
    LK_C_S_c,
    LK_C_S_d,
    LK_C_S_e,
    LK_C_S_f,
    LK_C_S_g,
    LK_C_S_h,
    LK_C_S_i,
    LK_C_S_j,
    LK_C_S_k,
    LK_C_S_l,
    LK_C_S_m,
    LK_C_S_n,
    LK_C_S_o,
    LK_C_S_p,
    LK_C_S_q,
    LK_C_S_r,
    LK_C_S_s,
    LK_C_S_t,
    LK_C_S_u,
    LK_C_S_v,
    LK_C_S_w,
    LK_C_S_x,
    LK_C_S_y,
    LK_C_S_z,

    LK_M_S_RET,
    LK_M_S_SPC, 
    LK_M_S_TAB,
    LK_M_S_GRAVE,
    LK_M_S_MINUS,
    LK_M_S_EQUALS,
    LK_M_S_LEFTBRACKET,
    LK_M_S_RIGHTBRACKET,
    LK_M_S_BACKSLASH,
    LK_M_S_SEMICOLON,
    LK_M_S_APOSTROPHE,
    LK_M_S_COMMA,
    LK_M_S_PERIOD,
    LK_M_S_SLASH,
    LK_M_S_UP,
    LK_M_S_DOWN,
    LK_M_S_LEFT,
    LK_M_S_RIGHT,
    LK_M_S_0,
    LK_M_S_1,
    LK_M_S_2,
    LK_M_S_3,
    LK_M_S_4,
    LK_M_S_5,
    LK_M_S_6,
    LK_M_S_7,
    LK_M_S_8,
    LK_M_S_9,
    LK_M_S_a,
    LK_M_S_b,
    LK_M_S_c,
    LK_M_S_d,
    LK_M_S_e,
    LK_M_S_f,
    LK_M_S_g,
    LK_M_S_h,
    LK_M_S_i,
    LK_M_S_j,
    LK_M_S_k,
    LK_M_S_l,
    LK_M_S_m,
    LK_M_S_n,
    LK_M_S_o,
    LK_M_S_p,
    LK_M_S_q,
    LK_M_S_r,
    LK_M_S_s,
    LK_M_S_t,
    LK_M_S_u,
    LK_M_S_v,
    LK_M_S_w,
    LK_M_S_x,
    LK_M_S_y,
    LK_M_S_z,

    LK_C_M_S_RET,
    LK_C_M_S_SPC, 
    LK_C_M_S_TAB,
    LK_C_M_S_GRAVE,
    LK_C_M_S_MINUS,
    LK_C_M_S_EQUALS,
    LK_C_M_S_LEFTBRACKET,
    LK_C_M_S_RIGHTBRACKET,
    LK_C_M_S_BACKSLASH,
    LK_C_M_S_SEMICOLON,
    LK_C_M_S_APOSTROPHE,
    LK_C_M_S_COMMA,
    LK_C_M_S_PERIOD,
    LK_C_M_S_SLASH,
    LK_C_M_S_UP,
    LK_C_M_S_DOWN,
    LK_C_M_S_LEFT,
    LK_C_M_S_RIGHT,
    LK_C_M_S_0,
    LK_C_M_S_1,
    LK_C_M_S_2,
    LK_C_M_S_3,
    LK_C_M_S_4,
    LK_C_M_S_5,
    LK_C_M_S_6,
    LK_C_M_S_7,
    LK_C_M_S_8,
    LK_C_M_S_9,
    LK_C_M_S_a,
    LK_C_M_S_b,
    LK_C_M_S_c,
    LK_C_M_S_d,
    LK_C_M_S_e,
    LK_C_M_S_f,
    LK_C_M_S_g,
    LK_C_M_S_h,
    LK_C_M_S_i,
    LK_C_M_S_j,
    LK_C_M_S_k,
    LK_C_M_S_l,
    LK_C_M_S_m,
    LK_C_M_S_n,
    LK_C_M_S_o,
    LK_C_M_S_p,
    LK_C_M_S_q,
    LK_C_M_S_r,
    LK_C_M_S_s,
    LK_C_M_S_t,
    LK_C_M_S_u,
    LK_C_M_S_v,
    LK_C_M_S_w,
    LK_C_M_S_x,
    LK_C_M_S_y,
    LK_C_M_S_z,
     
    NUM_LK,    
} zgl_LongKeyCode;

typedef struct zgl_KeyComplex {
    zgl_KeyCode zk;
    uint8_t mod_states;
    zgl_LongKeyCode lk;
} zgl_KeyComplex;

#define LK_PRESSED 0x01
extern uint8_t LK_states[NUM_LK];
extern char const *const LK_strs[NUM_LK];
extern zgl_LongKeyCode LK_str_to_LK(char const *str);
extern zgl_Result LK_str_to_KeyComplex(char const *str, zgl_KeyComplex *out_KC);

#define ZK_PRESSED 0x01
extern uint8_t ZK_states[NUM_ZK];
extern char const *const ZK_strs[NUM_ZK];
extern zgl_KeyCode ZK_str_to_ZK(char const *str);

#define ZGL_MOUSELEFT_MASK      0x01
#define ZGL_MOUSERIGHT_MASK     0x02
#define ZGL_MOUSEMID_MASK       0x04
#define ZGL_MOUSEWHEELUP_MASK   0x08
#define ZGL_MOUSEWHEELDOWN_MASK 0x10
extern uint8_t mouse_states;

#define ZGL_CTRL_MASK  0x01
#define ZGL_ALT_MASK   0x02
#define ZGL_SHIFT_MASK 0x04
extern uint8_t modifier_states;
zgl_LongKeyCode ZK_to_LK(zgl_KeyCode ZK);
zgl_LongKeyCode KeyComplex_to_LK(zgl_KeyComplex *KC);

#endif
